
// DO NOT EDIT THIS FILE DIRECTLY!
// This file was automatically generated via ./scripts/generate-interfaces.ts

/// <reference lib="ESNext" />
/// <reference lib="DOM" />
/// <reference lib="DOM.Iterable" />
/// <reference lib="DOM.AsyncIterable" />

/// <reference path="./index.d.ts" />

declare namespace WinzigInternals {
	interface TagNameMap {
		a: WinzigInternals.ElementAttributes.HTMLAnchorElementAttributes;
		abbr: WinzigInternals.ElementAttributes.HTMLElementAttributes;
		address: WinzigInternals.ElementAttributes.HTMLElementAttributes;
		area: WinzigInternals.ElementAttributes.HTMLAreaElementAttributes;
		article: WinzigInternals.ElementAttributes.HTMLElementAttributes;
		aside: WinzigInternals.ElementAttributes.HTMLElementAttributes;
		audio: WinzigInternals.ElementAttributes.HTMLAudioElementAttributes;
		b: WinzigInternals.ElementAttributes.HTMLElementAttributes;
		base: WinzigInternals.ElementAttributes.HTMLBaseElementAttributes;
		bdi: WinzigInternals.ElementAttributes.HTMLElementAttributes;
		bdo: WinzigInternals.ElementAttributes.HTMLElementAttributes;
		blockquote: WinzigInternals.ElementAttributes.HTMLQuoteElementAttributes;
		body: WinzigInternals.ElementAttributes.HTMLBodyElementAttributes;
		br: WinzigInternals.ElementAttributes.HTMLBRElementAttributes;
		button: WinzigInternals.ElementAttributes.HTMLButtonElementAttributes;
		canvas: WinzigInternals.ElementAttributes.HTMLCanvasElementAttributes;
		caption: WinzigInternals.ElementAttributes.HTMLTableCaptionElementAttributes;
		cite: WinzigInternals.ElementAttributes.HTMLElementAttributes;
		code: WinzigInternals.ElementAttributes.HTMLElementAttributes;
		col: WinzigInternals.ElementAttributes.HTMLTableColElementAttributes;
		colgroup: WinzigInternals.ElementAttributes.HTMLTableColElementAttributes;
		data: WinzigInternals.ElementAttributes.HTMLDataElementAttributes;
		datalist: WinzigInternals.ElementAttributes.HTMLDataListElementAttributes;
		dd: WinzigInternals.ElementAttributes.HTMLElementAttributes;
		del: WinzigInternals.ElementAttributes.HTMLModElementAttributes;
		details: WinzigInternals.ElementAttributes.HTMLDetailsElementAttributes;
		dfn: WinzigInternals.ElementAttributes.HTMLElementAttributes;
		dialog: WinzigInternals.ElementAttributes.HTMLDialogElementAttributes;
		div: WinzigInternals.ElementAttributes.HTMLDivElementAttributes;
		dl: WinzigInternals.ElementAttributes.HTMLDListElementAttributes;
		dt: WinzigInternals.ElementAttributes.HTMLElementAttributes;
		em: WinzigInternals.ElementAttributes.HTMLElementAttributes;
		embed: WinzigInternals.ElementAttributes.HTMLEmbedElementAttributes;
		fieldset: WinzigInternals.ElementAttributes.HTMLFieldSetElementAttributes;
		figcaption: WinzigInternals.ElementAttributes.HTMLElementAttributes;
		figure: WinzigInternals.ElementAttributes.HTMLElementAttributes;
		footer: WinzigInternals.ElementAttributes.HTMLElementAttributes;
		form: WinzigInternals.ElementAttributes.HTMLFormElementAttributes;
		h1: WinzigInternals.ElementAttributes.HTMLHeadingElementAttributes;
		h2: WinzigInternals.ElementAttributes.HTMLHeadingElementAttributes;
		h3: WinzigInternals.ElementAttributes.HTMLHeadingElementAttributes;
		h4: WinzigInternals.ElementAttributes.HTMLHeadingElementAttributes;
		h5: WinzigInternals.ElementAttributes.HTMLHeadingElementAttributes;
		h6: WinzigInternals.ElementAttributes.HTMLHeadingElementAttributes;
		head: WinzigInternals.ElementAttributes.HTMLHeadElementAttributes;
		header: WinzigInternals.ElementAttributes.HTMLElementAttributes;
		hgroup: WinzigInternals.ElementAttributes.HTMLElementAttributes;
		hr: WinzigInternals.ElementAttributes.HTMLHRElementAttributes;
		html: WinzigInternals.ElementAttributes.HTMLHtmlElementAttributes;
		i: WinzigInternals.ElementAttributes.HTMLElementAttributes;
		iframe: WinzigInternals.ElementAttributes.HTMLIFrameElementAttributes;
		img: WinzigInternals.ElementAttributes.HTMLImageElementAttributes;
		input: WinzigInternals.ElementAttributes.HTMLInputElementAttributes;
		ins: WinzigInternals.ElementAttributes.HTMLModElementAttributes;
		kbd: WinzigInternals.ElementAttributes.HTMLElementAttributes;
		label: WinzigInternals.ElementAttributes.HTMLLabelElementAttributes;
		legend: WinzigInternals.ElementAttributes.HTMLLegendElementAttributes;
		li: WinzigInternals.ElementAttributes.HTMLLIElementAttributes;
		link: WinzigInternals.ElementAttributes.HTMLLinkElementAttributes;
		main: WinzigInternals.ElementAttributes.HTMLElementAttributes;
		map: WinzigInternals.ElementAttributes.HTMLMapElementAttributes;
		mark: WinzigInternals.ElementAttributes.HTMLElementAttributes;
		menu: WinzigInternals.ElementAttributes.HTMLMenuElementAttributes;
		meta: WinzigInternals.ElementAttributes.HTMLMetaElementAttributes;
		meter: WinzigInternals.ElementAttributes.HTMLMeterElementAttributes;
		nav: WinzigInternals.ElementAttributes.HTMLElementAttributes;
		noscript: WinzigInternals.ElementAttributes.HTMLElementAttributes;
		object: WinzigInternals.ElementAttributes.HTMLObjectElementAttributes;
		ol: WinzigInternals.ElementAttributes.HTMLOListElementAttributes;
		optgroup: WinzigInternals.ElementAttributes.HTMLOptGroupElementAttributes;
		option: WinzigInternals.ElementAttributes.HTMLOptionElementAttributes;
		output: WinzigInternals.ElementAttributes.HTMLOutputElementAttributes;
		p: WinzigInternals.ElementAttributes.HTMLParagraphElementAttributes;
		picture: WinzigInternals.ElementAttributes.HTMLPictureElementAttributes;
		pre: WinzigInternals.ElementAttributes.HTMLPreElementAttributes;
		progress: WinzigInternals.ElementAttributes.HTMLProgressElementAttributes;
		q: WinzigInternals.ElementAttributes.HTMLQuoteElementAttributes;
		rp: WinzigInternals.ElementAttributes.HTMLElementAttributes;
		rt: WinzigInternals.ElementAttributes.HTMLElementAttributes;
		ruby: WinzigInternals.ElementAttributes.HTMLElementAttributes;
		s: WinzigInternals.ElementAttributes.HTMLElementAttributes;
		samp: WinzigInternals.ElementAttributes.HTMLElementAttributes;
		script: WinzigInternals.ElementAttributes.HTMLScriptElementAttributes;
		search: WinzigInternals.ElementAttributes.HTMLElementAttributes;
		section: WinzigInternals.ElementAttributes.HTMLElementAttributes;
		select: WinzigInternals.ElementAttributes.HTMLSelectElementAttributes;
		slot: WinzigInternals.ElementAttributes.HTMLSlotElementAttributes;
		small: WinzigInternals.ElementAttributes.HTMLElementAttributes;
		source: WinzigInternals.ElementAttributes.HTMLSourceElementAttributes;
		span: WinzigInternals.ElementAttributes.HTMLSpanElementAttributes;
		strong: WinzigInternals.ElementAttributes.HTMLElementAttributes;
		style: WinzigInternals.ElementAttributes.HTMLStyleElementAttributes;
		sub: WinzigInternals.ElementAttributes.HTMLElementAttributes;
		summary: WinzigInternals.ElementAttributes.HTMLElementAttributes;
		sup: WinzigInternals.ElementAttributes.HTMLElementAttributes;
		table: WinzigInternals.ElementAttributes.HTMLTableElementAttributes;
		tbody: WinzigInternals.ElementAttributes.HTMLTableSectionElementAttributes;
		td: WinzigInternals.ElementAttributes.HTMLTableCellElementAttributes;
		template: WinzigInternals.ElementAttributes.HTMLTemplateElementAttributes;
		textarea: WinzigInternals.ElementAttributes.HTMLTextAreaElementAttributes;
		tfoot: WinzigInternals.ElementAttributes.HTMLTableSectionElementAttributes;
		th: WinzigInternals.ElementAttributes.HTMLTableCellElementAttributes;
		thead: WinzigInternals.ElementAttributes.HTMLTableSectionElementAttributes;
		time: WinzigInternals.ElementAttributes.HTMLTimeElementAttributes;
		title: WinzigInternals.ElementAttributes.HTMLTitleElementAttributes;
		tr: WinzigInternals.ElementAttributes.HTMLTableRowElementAttributes;
		track: WinzigInternals.ElementAttributes.HTMLTrackElementAttributes;
		u: WinzigInternals.ElementAttributes.HTMLElementAttributes;
		ul: WinzigInternals.ElementAttributes.HTMLUListElementAttributes;
		var: WinzigInternals.ElementAttributes.HTMLElementAttributes;
		video: WinzigInternals.ElementAttributes.HTMLVideoElementAttributes;
		wbr: WinzigInternals.ElementAttributes.HTMLElementAttributes;
	}

	namespace ElementAttributes {
		interface HTMLAnchorElementAttributes extends WinzigInternals.ElementAttributes.HTMLElementAttributes, WinzigInternals.ElementAttributes.HTMLHyperlinkElementUtilsAttributes {
			download?: string;
			hreflang?: string;
			ping?: string;
			referrerPolicy?: ReferrerPolicy;
			rel?: "alternate" | "canonical" | "author" | "bookmark" | "dns-prefetch" | "expect" | "external" | "help" | "icon" | "manifest" | "modulepreload" | "license" | "next" | "nofollow" | "noopener" | "noreferrer" | "opener" | "pingback" | "preconnect" | "prefetch" | "preload" | "prev" | "privacy-policy" | "search" | "stylesheet" | "tag" | "terms-of-service" | "about" | "archived" | "attachment" | "category" | "code-repository" | "code-license" | "component" | "chrome-webstore-item" | "content-repository" | "content-license" | "disclosure" | "discussion" | "donation" | "edit" | "enclosure" | "sitemap" | (string & {});
			target?: "_blank" | "_self" | "_parent" | "_top" | (string & {});
			text?: string;
			type?: string;
		}

		interface HTMLAreaElementAttributes extends WinzigInternals.ElementAttributes.HTMLElementAttributes, WinzigInternals.ElementAttributes.HTMLHyperlinkElementUtilsAttributes {
			alt?: string;
			coords?: string;
			download?: string;
			ping?: string;
			referrerPolicy?: ReferrerPolicy;
			rel?: "alternate" | "canonical" | "author" | "bookmark" | "dns-prefetch" | "expect" | "external" | "help" | "icon" | "manifest" | "modulepreload" | "license" | "next" | "nofollow" | "noopener" | "noreferrer" | "opener" | "pingback" | "preconnect" | "prefetch" | "preload" | "prev" | "privacy-policy" | "search" | "stylesheet" | "tag" | "terms-of-service" | "about" | "archived" | "attachment" | "category" | "code-repository" | "code-license" | "component" | "chrome-webstore-item" | "content-repository" | "content-license" | "disclosure" | "discussion" | "donation" | "edit" | "enclosure" | "sitemap" | (string & {});
			shape?: string;
			target?: "_blank" | "_self" | "_parent" | "_top" | (string & {});
		}

		interface HTMLAudioElementAttributes extends WinzigInternals.ElementAttributes.HTMLMediaElementAttributes {
		}

		interface HTMLBRElementAttributes extends WinzigInternals.ElementAttributes.HTMLElementAttributes {
		}

		interface HTMLBaseElementAttributes extends WinzigInternals.ElementAttributes.HTMLElementAttributes {
			href?: string;
			target?: string;
		}

		interface HTMLBodyElementAttributes extends WinzigInternals.ElementAttributes.HTMLElementAttributes {
		}

		interface HTMLButtonElementAttributes extends WinzigInternals.ElementAttributes.HTMLElementAttributes, WinzigInternals.ElementAttributes.PopoverInvokerElementAttributes {
			disabled?: boolean;
			formAction?: string;
			formEnctype?: "application/x-www-form-urlencoded" | "multipart/form-data" | "text/plain";
			formMethod?: "get" | "post" | "dialog";
			formNoValidate?: boolean;
			formTarget?: "_blank" | "_self" | "_parent" | "_top" | (string & {});
			name?: string;
			type?: "submit" | "reset" | "button";
			value?: string;
		}

		interface HTMLCanvasElementAttributes extends WinzigInternals.ElementAttributes.HTMLElementAttributes {
			height?: number;
			width?: number;
		}

		interface HTMLDListElementAttributes extends WinzigInternals.ElementAttributes.HTMLElementAttributes {
		}

		interface HTMLDataElementAttributes extends WinzigInternals.ElementAttributes.HTMLElementAttributes {
			value?: string;
		}

		interface HTMLDataListElementAttributes extends WinzigInternals.ElementAttributes.HTMLElementAttributes {
		}

		interface HTMLDetailsElementAttributes extends WinzigInternals.ElementAttributes.HTMLElementAttributes {
			name?: string;
			open?: boolean;
		}

		interface HTMLDialogElementAttributes extends WinzigInternals.ElementAttributes.HTMLElementAttributes {
			open?: boolean;
			returnValue?: string;
		}

		interface HTMLDivElementAttributes extends WinzigInternals.ElementAttributes.HTMLElementAttributes {
		}

		interface HTMLEmbedElementAttributes extends WinzigInternals.ElementAttributes.HTMLElementAttributes {
			height?: string;
			src?: string;
			type?: string;
			width?: string;
		}

		interface HTMLFieldSetElementAttributes extends WinzigInternals.ElementAttributes.HTMLElementAttributes {
			disabled?: boolean;
			name?: string;
		}

		interface HTMLFormElementAttributes extends WinzigInternals.ElementAttributes.HTMLElementAttributes {
			acceptCharset?: string;
			action?: string;
			autocomplete?: AutoFillBase;
			encoding?: "application/x-www-form-urlencoded" | "multipart/form-data" | "text/plain";
			enctype?: "application/x-www-form-urlencoded" | "multipart/form-data" | "text/plain";
			method?: "get" | "post" | "dialog";
			name?: string;
			noValidate?: boolean;
			rel?: "alternate" | "canonical" | "author" | "bookmark" | "dns-prefetch" | "expect" | "external" | "help" | "icon" | "manifest" | "modulepreload" | "license" | "next" | "nofollow" | "noopener" | "noreferrer" | "opener" | "pingback" | "preconnect" | "prefetch" | "preload" | "prev" | "privacy-policy" | "search" | "stylesheet" | "tag" | "terms-of-service" | "about" | "archived" | "attachment" | "category" | "code-repository" | "code-license" | "component" | "chrome-webstore-item" | "content-repository" | "content-license" | "disclosure" | "discussion" | "donation" | "edit" | "enclosure" | "sitemap" | (string & {});
			target?: string;
		}

		interface HTMLHRElementAttributes extends WinzigInternals.ElementAttributes.HTMLElementAttributes {
		}

		interface HTMLHeadElementAttributes extends WinzigInternals.ElementAttributes.HTMLElementAttributes {
		}

		interface HTMLHeadingElementAttributes extends WinzigInternals.ElementAttributes.HTMLElementAttributes {
		}

		interface HTMLHtmlElementAttributes extends WinzigInternals.ElementAttributes.HTMLElementAttributes {
		}

		interface HTMLHyperlinkElementUtilsAttributes {
			hash?: string;
			host?: string;
			hostname?: string;
			href?: string;
			password?: string;
			pathname?: string;
			port?: string;
			protocol?: string;
			search?: string;
			username?: string;
		}

		interface HTMLIFrameElementAttributes extends WinzigInternals.ElementAttributes.HTMLElementAttributes {
			allow?: string;
			allowFullscreen?: boolean;
			height?: string;
			loading?: string;
			name?: string;
			referrerPolicy?: ReferrerPolicy;
			src?: string;
			srcdoc?: string;
			width?: string;
		}

		interface HTMLImageElementAttributes extends WinzigInternals.ElementAttributes.HTMLElementAttributes {
			alt?: string;
			crossOrigin?: string | null;
			decoding?: "async" | "sync" | "auto";
			fetchPriority?: string;
			height?: number;
			isMap?: boolean;
			loading?: "eager" | "lazy";
			referrerPolicy?: ReferrerPolicy;
			sizes?: string;
			src?: string;
			srcset?: string;
			useMap?: string;
			width?: number;
		}

		interface HTMLInputElementAttributes extends WinzigInternals.ElementAttributes.HTMLElementAttributes, WinzigInternals.ElementAttributes.PopoverInvokerElementAttributes {
			accept?: string;
			alt?: string;
			autocomplete?: AutoFill;
			capture?: string;
			checked?: boolean;
			defaultChecked?: boolean;
			defaultValue?: string;
			dirName?: string;
			disabled?: boolean;
			files?: FileList | null;
			formAction?: string;
			formEnctype?: "application/x-www-form-urlencoded" | "multipart/form-data" | "text/plain";
			formMethod?: "get" | "post" | "dialog";
			formNoValidate?: boolean;
			formTarget?: "_blank" | "_self" | "_parent" | "_top" | (string & {});
			height?: number;
			indeterminate?: boolean;
			max?: string;
			maxLength?: number;
			min?: string;
			minLength?: number;
			multiple?: boolean;
			name?: string;
			pattern?: string;
			placeholder?: string;
			readOnly?: boolean;
			required?: boolean;
			selectionDirection?: "forward" | "backward" | "none" | null;
			selectionEnd?: number | null;
			selectionStart?: number | null;
			size?: number;
			src?: string;
			step?: string;
			type?: "hidden" | "text" | "search" | "tel" | "url" | "email" | "password" | "date" | "month" | "week" | "time" | "datetime-local" | "number" | "range" | "color" | "checkbox" | "radio" | "file" | "submit" | "image" | "reset" | "button";
			value?: string;
			valueAsDate?: Date | null;
			valueAsNumber?: number;
			webkitdirectory?: boolean;
			width?: number;
		}

		interface HTMLLIElementAttributes extends WinzigInternals.ElementAttributes.HTMLElementAttributes {
			value?: number;
		}

		interface HTMLLabelElementAttributes extends WinzigInternals.ElementAttributes.HTMLElementAttributes {
			htmlFor?: string;
		}

		interface HTMLLegendElementAttributes extends WinzigInternals.ElementAttributes.HTMLElementAttributes {
		}

		interface HTMLLinkElementAttributes extends WinzigInternals.ElementAttributes.HTMLElementAttributes, WinzigInternals.ElementAttributes.LinkStyleAttributes {
			as?: string;
			crossOrigin?: string | null;
			disabled?: boolean;
			fetchPriority?: string;
			href?: string;
			hreflang?: string;
			imageSizes?: string;
			imageSrcset?: string;
			integrity?: string;
			media?: string;
			referrerPolicy?: ReferrerPolicy;
			rel?: "alternate" | "canonical" | "author" | "bookmark" | "dns-prefetch" | "expect" | "external" | "help" | "icon" | "manifest" | "modulepreload" | "license" | "next" | "nofollow" | "noopener" | "noreferrer" | "opener" | "pingback" | "preconnect" | "prefetch" | "preload" | "prev" | "privacy-policy" | "search" | "stylesheet" | "tag" | "terms-of-service" | "about" | "archived" | "attachment" | "category" | "code-repository" | "code-license" | "component" | "chrome-webstore-item" | "content-repository" | "content-license" | "disclosure" | "discussion" | "donation" | "edit" | "enclosure" | "sitemap" | (string & {});
			sizes?: string;
			type?: string;
		}

		interface HTMLMapElementAttributes extends WinzigInternals.ElementAttributes.HTMLElementAttributes {
			name?: string;
		}

		interface HTMLMediaElementAttributes extends WinzigInternals.ElementAttributes.HTMLElementAttributes, WinzigInternals.HTMLMediaElementEventHandlers {
			autoplay?: boolean;
			controls?: boolean;
			crossOrigin?: string | null;
			currentTime?: number;
			defaultMuted?: boolean;
			defaultPlaybackRate?: number;
			disableRemotePlayback?: boolean;
			loop?: boolean;
			muted?: boolean;
			playbackRate?: number;
			preload?: "none" | "metadata" | "auto" | "";
			preservesPitch?: boolean;
			src?: string;
			srcObject?: MediaProvider | null;
			volume?: number;
		}

		interface HTMLMenuElementAttributes extends WinzigInternals.ElementAttributes.HTMLElementAttributes {
		}

		interface HTMLMetaElementAttributes extends WinzigInternals.ElementAttributes.HTMLElementAttributes {
			content?: string;
			httpEquiv?: "content-language" | "content-type" | "default-style" | "refresh" | "set-cookie" | "x-ua-compatible" | "content-security-policy" | "origin-trial" | (string & {});
			media?: string;
			name?: "application-name" | "author" | "description" | "generator" | "keywords" | "referrer" | "theme-color" | "color-scheme" | "license" | "robots" | "viewport" | "version" | "twitter:card" | "twitter:site" | "twitter:site:id" | "twitter:creator" | "twitter:creator:id" | "twitter:description" | "twitter:title" | "twitter:image" | "twitter:image:alt" | "twitter:player" | "twitter:player:width" | "twitter:player:height" | "twitter:player:stream" | "twitter:app:name:iphone" | "twitter:app:id:iphone" | "twitter:app:url:iphone" | "twitter:app:name:ipad" | "twitter:app:id:ipad" | "twitter:app:url:ipad" | "twitter:app:name:googleplay" | "twitter:app:id:googleplay" | "twitter:app:url:googleplay" | "app-title" | (string & {});
			property?: "og:title" | "og:type" | "og:image" | "og:url" | "og:audio" | "og:description" | "og:determiner" | "og:locale" | "og:locale:alternate" | "og:site_name" | "og:video" | "og:image" | "og:image:url" | "og:image" | "og:image:secure_url" | "og:image:type" | "og:image:width" | "og:image:height" | "og:image:alt" | "og:image:alt" | "og:video" | "og:image" | "og:audio" | "og:type" | "og:type" | "og:type" | "og:type" | "og:type" | "og:type" | (string & {});
		}

		interface HTMLMeterElementAttributes extends WinzigInternals.ElementAttributes.HTMLElementAttributes {
			high?: number;
			low?: number;
			max?: number;
			min?: number;
			optimum?: number;
			value?: number;
		}

		interface HTMLModElementAttributes extends WinzigInternals.ElementAttributes.HTMLElementAttributes {
			cite?: string;
			dateTime?: string;
		}

		interface HTMLOListElementAttributes extends WinzigInternals.ElementAttributes.HTMLElementAttributes {
			reversed?: boolean;
			start?: number;
			type?: "1" | "a" | "A" | "i" | "I";
		}

		interface HTMLObjectElementAttributes extends WinzigInternals.ElementAttributes.HTMLElementAttributes {
			data?: string;
			height?: string;
			name?: string;
			type?: string;
			width?: string;
		}

		interface HTMLOptGroupElementAttributes extends WinzigInternals.ElementAttributes.HTMLElementAttributes {
			disabled?: boolean;
			label?: string;
		}

		interface HTMLOptionElementAttributes extends WinzigInternals.ElementAttributes.HTMLElementAttributes {
			defaultSelected?: boolean;
			disabled?: boolean;
			label?: string;
			selected?: boolean;
			text?: string;
			value?: string;
		}

		interface HTMLOutputElementAttributes extends WinzigInternals.ElementAttributes.HTMLElementAttributes {
			defaultValue?: string;
			name?: string;
			value?: string;
		}

		interface HTMLParagraphElementAttributes extends WinzigInternals.ElementAttributes.HTMLElementAttributes {
		}

		interface HTMLPictureElementAttributes extends WinzigInternals.ElementAttributes.HTMLElementAttributes {
		}

		interface HTMLPreElementAttributes extends WinzigInternals.ElementAttributes.HTMLElementAttributes {
		}

		interface HTMLProgressElementAttributes extends WinzigInternals.ElementAttributes.HTMLElementAttributes {
			max?: number;
			value?: number;
		}

		interface HTMLQuoteElementAttributes extends WinzigInternals.ElementAttributes.HTMLElementAttributes {
			cite?: string;
		}

		interface HTMLScriptElementAttributes extends WinzigInternals.ElementAttributes.HTMLElementAttributes {
			async?: boolean;
			crossOrigin?: string | null;
			defer?: boolean;
			fetchPriority?: string;
			integrity?: string;
			noModule?: boolean;
			referrerPolicy?: ReferrerPolicy;
			src?: string;
			text?: string;
			type?: string;
		}

		interface HTMLSelectElementAttributes extends WinzigInternals.ElementAttributes.HTMLElementAttributes {
			autocomplete?: AutoFill;
			disabled?: boolean;
			length?: number;
			multiple?: boolean;
			name?: string;
			required?: boolean;
			selectedIndex?: number;
			size?: number;
			value?: string;
		}

		interface HTMLSlotElementAttributes extends WinzigInternals.ElementAttributes.HTMLElementAttributes {
			name?: string;
		}

		interface HTMLSourceElementAttributes extends WinzigInternals.ElementAttributes.HTMLElementAttributes {
			height?: number;
			media?: string;
			sizes?: string;
			src?: string;
			srcset?: string;
			type?: string;
			width?: number;
		}

		interface HTMLSpanElementAttributes extends WinzigInternals.ElementAttributes.HTMLElementAttributes {
		}

		interface HTMLStyleElementAttributes extends WinzigInternals.ElementAttributes.HTMLElementAttributes, WinzigInternals.ElementAttributes.LinkStyleAttributes {
			disabled?: boolean;
			media?: string;
		}

		interface HTMLTableCaptionElementAttributes extends WinzigInternals.ElementAttributes.HTMLElementAttributes {
		}

		interface HTMLTableCellElementAttributes extends WinzigInternals.ElementAttributes.HTMLElementAttributes {
			abbr?: string;
			colSpan?: number;
			headers?: string;
			rowSpan?: number;
			scope?: string;
		}

		interface HTMLTableColElementAttributes extends WinzigInternals.ElementAttributes.HTMLElementAttributes {
			span?: number;
		}

		interface HTMLTableDataCellElementAttributes extends WinzigInternals.ElementAttributes.HTMLTableCellElementAttributes {
		}

		interface HTMLTableElementAttributes extends WinzigInternals.ElementAttributes.HTMLElementAttributes {
			caption?: HTMLTableCaptionElement | null;
			tFoot?: HTMLTableSectionElement | null;
			tHead?: HTMLTableSectionElement | null;
		}

		interface HTMLTableHeaderCellElementAttributes extends WinzigInternals.ElementAttributes.HTMLTableCellElementAttributes {
		}

		interface HTMLTableRowElementAttributes extends WinzigInternals.ElementAttributes.HTMLElementAttributes {
		}

		interface HTMLTableSectionElementAttributes extends WinzigInternals.ElementAttributes.HTMLElementAttributes {
		}

		interface HTMLTemplateElementAttributes extends WinzigInternals.ElementAttributes.HTMLElementAttributes {
			shadowRootClonable?: boolean;
			shadowRootDelegatesFocus?: boolean;
			shadowRootMode?: string;
			shadowRootSerializable?: boolean;
		}

		interface HTMLTextAreaElementAttributes extends WinzigInternals.ElementAttributes.HTMLElementAttributes {
			autocomplete?: AutoFill;
			cols?: number;
			defaultValue?: string;
			dirName?: string;
			disabled?: boolean;
			maxLength?: number;
			minLength?: number;
			name?: string;
			placeholder?: string;
			readOnly?: boolean;
			required?: boolean;
			rows?: number;
			selectionDirection?: "forward" | "backward" | "none";
			selectionEnd?: number;
			selectionStart?: number;
			value?: string;
			wrap?: string;
		}

		interface HTMLTimeElementAttributes extends WinzigInternals.ElementAttributes.HTMLElementAttributes {
			dateTime?: string;
		}

		interface HTMLTitleElementAttributes extends WinzigInternals.ElementAttributes.HTMLElementAttributes {
			text?: string;
		}

		interface HTMLTrackElementAttributes extends WinzigInternals.ElementAttributes.HTMLElementAttributes {
			default?: boolean;
			kind?: string;
			label?: string;
			src?: string;
			srclang?: string;
		}

		interface HTMLUListElementAttributes extends WinzigInternals.ElementAttributes.HTMLElementAttributes {
		}

		interface HTMLUnknownElementAttributes extends WinzigInternals.ElementAttributes.HTMLElementAttributes {
		}

		interface HTMLVideoElementAttributes extends WinzigInternals.ElementAttributes.HTMLMediaElementAttributes, WinzigInternals.HTMLVideoElementEventHandlers {
			disablePictureInPicture?: boolean;
			height?: number;
			playsInline?: boolean;
			poster?: string;
			width?: number;
		}

		interface LinkStyleAttributes {
		}

		interface PopoverInvokerElementAttributes {
			popoverTargetAction?: string;
			popoverTargetElement?: Element | null;
		}
	}

	interface WinzigGenericElement extends HTMLElement {
		/** Valid for {@link HTMLTrackElement|`HTMLTrackElement`}. */
		readonly ERROR: 3;
		/** Valid for {@link HTMLMediaElement|`HTMLMediaElement`}. */
		readonly HAVE_CURRENT_DATA: 2;
		/** Valid for {@link HTMLMediaElement|`HTMLMediaElement`}. */
		readonly HAVE_ENOUGH_DATA: 4;
		/** Valid for {@link HTMLMediaElement|`HTMLMediaElement`}. */
		readonly HAVE_FUTURE_DATA: 3;
		/** Valid for {@link HTMLMediaElement|`HTMLMediaElement`}. */
		readonly HAVE_METADATA: 1;
		/** Valid for {@link HTMLMediaElement|`HTMLMediaElement`}. */
		readonly HAVE_NOTHING: 0;
		/** Valid for {@link HTMLTrackElement|`HTMLTrackElement`}. */
		readonly LOADED: 2;
		/** Valid for {@link HTMLTrackElement|`HTMLTrackElement`}. */
		readonly LOADING: 1;
		/** Valid for {@link HTMLMediaElement|`HTMLMediaElement`}. */
		readonly NETWORK_EMPTY: 0;
		/** Valid for {@link HTMLMediaElement|`HTMLMediaElement`}. */
		readonly NETWORK_IDLE: 1;
		/** Valid for {@link HTMLMediaElement|`HTMLMediaElement`}. */
		readonly NETWORK_LOADING: 2;
		/** Valid for {@link HTMLMediaElement|`HTMLMediaElement`}. */
		readonly NETWORK_NO_SOURCE: 3;
		/** Valid for {@link HTMLTrackElement|`HTMLTrackElement`}. */
		readonly NONE: 0;
		/** @deprecated Valid for {@link HTMLBodyElement|`HTMLBodyElement`}. */
		aLink: string;
		/** Valid for {@link HTMLTableCellElement|`HTMLTableCellElement`}. */
		abbr: string;
		/** Valid for {@link HTMLInputElement|`HTMLInputElement`}. */
		accept: string;
		/** Valid for {@link HTMLFormElement|`HTMLFormElement`}. */
		acceptCharset: string;
		/** Valid for {@link HTMLFormElement|`HTMLFormElement`}. */
		action: string;
		/** @deprecated Valid for {@link HTMLDivElement|`HTMLDivElement`}, {@link HTMLEmbedElement|`HTMLEmbedElement`}, {@link HTMLHRElement|`HTMLHRElement`}, {@link HTMLHeadingElement|`HTMLHeadingElement`}, {@link HTMLIFrameElement|`HTMLIFrameElement`}, {@link HTMLImageElement|`HTMLImageElement`}, {@link HTMLInputElement|`HTMLInputElement`}, {@link HTMLLegendElement|`HTMLLegendElement`}, {@link HTMLObjectElement|`HTMLObjectElement`}, {@link HTMLParagraphElement|`HTMLParagraphElement`}, {@link HTMLTableCaptionElement|`HTMLTableCaptionElement`}, {@link HTMLTableCellElement|`HTMLTableCellElement`}, {@link HTMLTableColElement|`HTMLTableColElement`}, {@link HTMLTableElement|`HTMLTableElement`}, {@link HTMLTableRowElement|`HTMLTableRowElement`} and {@link HTMLTableSectionElement|`HTMLTableSectionElement`}. */
		align: string;
		/** Valid for {@link HTMLIFrameElement|`HTMLIFrameElement`}. */
		allow: string;
		/** Valid for {@link HTMLIFrameElement|`HTMLIFrameElement`}. */
		allowFullscreen: boolean;
		/** Valid for {@link HTMLAreaElement|`HTMLAreaElement`}, {@link HTMLImageElement|`HTMLImageElement`} and {@link HTMLInputElement|`HTMLInputElement`}. */
		alt: string;
		/** @deprecated Valid for {@link HTMLObjectElement|`HTMLObjectElement`}. */
		archive: string;
		/** Valid for {@link HTMLMapElement|`HTMLMapElement`}. */
		readonly areas: HTMLCollection;
		/** Valid for {@link HTMLLinkElement|`HTMLLinkElement`}. */
		as: string;
		/** Valid for {@link HTMLScriptElement|`HTMLScriptElement`}. */
		async: boolean;
		/** Valid for {@link HTMLFormElement|`HTMLFormElement`}, {@link HTMLInputElement|`HTMLInputElement`}, {@link HTMLSelectElement|`HTMLSelectElement`} and {@link HTMLTextAreaElement|`HTMLTextAreaElement`}. */
		autocomplete: AutoFillBase | AutoFill;
		/** Valid for {@link HTMLOrSVGElement|`HTMLOrSVGElement`}. */
		autofocus: boolean;
		/** Valid for {@link HTMLMediaElement|`HTMLMediaElement`}. */
		autoplay: boolean;
		/** @deprecated Valid for {@link HTMLTableCellElement|`HTMLTableCellElement`}. */
		axis: string;
		/** @deprecated Valid for {@link HTMLBodyElement|`HTMLBodyElement`}. */
		background: string;
		/** @deprecated Valid for {@link HTMLBodyElement|`HTMLBodyElement`}, {@link HTMLTableCellElement|`HTMLTableCellElement`}, {@link HTMLTableElement|`HTMLTableElement`} and {@link HTMLTableRowElement|`HTMLTableRowElement`}. */
		bgColor: string;
		/** @deprecated Valid for {@link HTMLImageElement|`HTMLImageElement`}, {@link HTMLObjectElement|`HTMLObjectElement`} and {@link HTMLTableElement|`HTMLTableElement`}. */
		border: string;
		/** Valid for {@link HTMLMediaElement|`HTMLMediaElement`}. */
		readonly buffered: TimeRanges;
		/** Valid for {@link HTMLTableElement|`HTMLTableElement`}. */
		caption: HTMLTableCaptionElement | null;
		/** Valid for {@link HTMLInputElement|`HTMLInputElement`}. */
		capture: string;
		/** Valid for {@link HTMLTableCellElement|`HTMLTableCellElement`}. */
		readonly cellIndex: number;
		/** @deprecated Valid for {@link HTMLTableElement|`HTMLTableElement`}. */
		cellPadding: string;
		/** @deprecated Valid for {@link HTMLTableElement|`HTMLTableElement`}. */
		cellSpacing: string;
		/** Valid for {@link HTMLTableRowElement|`HTMLTableRowElement`}. */
		readonly cells: HTMLCollectionOf<HTMLTableCellElement>;
		/** @deprecated Valid for {@link HTMLTableCellElement|`HTMLTableCellElement`}, {@link HTMLTableColElement|`HTMLTableColElement`}, {@link HTMLTableRowElement|`HTMLTableRowElement`} and {@link HTMLTableSectionElement|`HTMLTableSectionElement`}. */
		ch: string;
		/** @deprecated Valid for {@link HTMLTableCellElement|`HTMLTableCellElement`}, {@link HTMLTableColElement|`HTMLTableColElement`}, {@link HTMLTableRowElement|`HTMLTableRowElement`} and {@link HTMLTableSectionElement|`HTMLTableSectionElement`}. */
		chOff: string;
		/** @deprecated Valid for {@link HTMLAnchorElement|`HTMLAnchorElement`}, {@link HTMLLinkElement|`HTMLLinkElement`} and {@link HTMLScriptElement|`HTMLScriptElement`}. */
		charset: string;
		/** Valid for {@link HTMLInputElement|`HTMLInputElement`}. */
		checked: boolean;
		/** Valid for {@link HTMLModElement|`HTMLModElement`} and {@link HTMLQuoteElement|`HTMLQuoteElement`}. */
		cite: string;
		/** @deprecated Valid for {@link HTMLBRElement|`HTMLBRElement`}. */
		clear: string;
		/** @deprecated Valid for {@link HTMLObjectElement|`HTMLObjectElement`}. */
		code: string;
		/** @deprecated Valid for {@link HTMLObjectElement|`HTMLObjectElement`}. */
		codeBase: string;
		/** @deprecated Valid for {@link HTMLObjectElement|`HTMLObjectElement`}. */
		codeType: string;
		/** Valid for {@link HTMLTableCellElement|`HTMLTableCellElement`}. */
		colSpan: number;
		/** @deprecated Valid for {@link HTMLHRElement|`HTMLHRElement`}. */
		color: string;
		/** Valid for {@link HTMLTextAreaElement|`HTMLTextAreaElement`}. */
		cols: number;
		/** @deprecated Valid for {@link HTMLDListElement|`HTMLDListElement`}, {@link HTMLMenuElement|`HTMLMenuElement`}, {@link HTMLOListElement|`HTMLOListElement`} and {@link HTMLUListElement|`HTMLUListElement`}. */
		compact: boolean;
		/** Valid for {@link HTMLImageElement|`HTMLImageElement`}. */
		readonly complete: boolean;
		/** Valid for {@link HTMLMetaElement|`HTMLMetaElement`} and {@link HTMLTemplateElement|`HTMLTemplateElement`}. */
		content: DocumentFragment | (string & {});
		/** Valid for {@link HTMLIFrameElement|`HTMLIFrameElement`} and {@link HTMLObjectElement|`HTMLObjectElement`}. */
		readonly contentDocument: Document | null;
		/** Valid for {@link HTMLIFrameElement|`HTMLIFrameElement`} and {@link HTMLObjectElement|`HTMLObjectElement`}. */
		readonly contentWindow: WindowProxy | null;
		/** Valid for {@link HTMLLabelElement|`HTMLLabelElement`}. */
		readonly control: HTMLElement | null;
		/** Valid for {@link HTMLMediaElement|`HTMLMediaElement`}. */
		controls: boolean;
		/** Valid for {@link HTMLAnchorElement|`HTMLAnchorElement`} and {@link HTMLAreaElement|`HTMLAreaElement`}. */
		coords: string;
		/** Valid for {@link HTMLImageElement|`HTMLImageElement`}, {@link HTMLLinkElement|`HTMLLinkElement`}, {@link HTMLMediaElement|`HTMLMediaElement`} and {@link HTMLScriptElement|`HTMLScriptElement`}. */
		crossOrigin: null | (string & {});
		/** Valid for {@link HTMLImageElement|`HTMLImageElement`} and {@link HTMLMediaElement|`HTMLMediaElement`}. */
		readonly currentSrc: string;
		/** Valid for {@link HTMLMediaElement|`HTMLMediaElement`}. */
		currentTime: number;
		/** Valid for {@link HTMLObjectElement|`HTMLObjectElement`}. */
		data: string;
		/** Valid for {@link HTMLOrSVGElement|`HTMLOrSVGElement`}. */
		readonly dataset: DOMStringMap;
		/** Valid for {@link HTMLModElement|`HTMLModElement`} and {@link HTMLTimeElement|`HTMLTimeElement`}. */
		dateTime: string;
		/** @deprecated Valid for {@link HTMLObjectElement|`HTMLObjectElement`}. */
		declare: boolean;
		/** Valid for {@link HTMLImageElement|`HTMLImageElement`}. */
		decoding: "async" | "sync" | "auto";
		/** Valid for {@link HTMLTrackElement|`HTMLTrackElement`}. */
		default: boolean;
		/** Valid for {@link HTMLInputElement|`HTMLInputElement`}. */
		defaultChecked: boolean;
		/** Valid for {@link HTMLMediaElement|`HTMLMediaElement`}. */
		defaultMuted: boolean;
		/** Valid for {@link HTMLMediaElement|`HTMLMediaElement`}. */
		defaultPlaybackRate: number;
		/** Valid for {@link HTMLOptionElement|`HTMLOptionElement`}. */
		defaultSelected: boolean;
		/** Valid for {@link HTMLInputElement|`HTMLInputElement`}, {@link HTMLOutputElement|`HTMLOutputElement`} and {@link HTMLTextAreaElement|`HTMLTextAreaElement`}. */
		defaultValue: string;
		/** Valid for {@link HTMLScriptElement|`HTMLScriptElement`}. */
		defer: boolean;
		/** Valid for {@link HTMLInputElement|`HTMLInputElement`} and {@link HTMLTextAreaElement|`HTMLTextAreaElement`}. */
		dirName: string;
		/** Valid for {@link HTMLVideoElement|`HTMLVideoElement`}. */
		disablePictureInPicture: boolean;
		/** Valid for {@link HTMLMediaElement|`HTMLMediaElement`}. */
		disableRemotePlayback: boolean;
		/** Valid for {@link HTMLButtonElement|`HTMLButtonElement`}, {@link HTMLFieldSetElement|`HTMLFieldSetElement`}, {@link HTMLInputElement|`HTMLInputElement`}, {@link HTMLLinkElement|`HTMLLinkElement`}, {@link HTMLOptGroupElement|`HTMLOptGroupElement`}, {@link HTMLOptionElement|`HTMLOptionElement`}, {@link HTMLSelectElement|`HTMLSelectElement`}, {@link HTMLStyleElement|`HTMLStyleElement`} and {@link HTMLTextAreaElement|`HTMLTextAreaElement`}. */
		disabled: boolean;
		/** Valid for {@link HTMLAnchorElement|`HTMLAnchorElement`} and {@link HTMLAreaElement|`HTMLAreaElement`}. */
		download: string;
		/** Valid for {@link HTMLMediaElement|`HTMLMediaElement`}. */
		readonly duration: number;
		/** Valid for {@link HTMLFieldSetElement|`HTMLFieldSetElement`} and {@link HTMLFormElement|`HTMLFormElement`}. */
		readonly elements: HTMLCollection | HTMLFormControlsCollection;
		/** Valid for {@link HTMLFormElement|`HTMLFormElement`}. */
		encoding: string;
		/** Valid for {@link HTMLFormElement|`HTMLFormElement`}. */
		enctype: string;
		/** Valid for {@link HTMLMediaElement|`HTMLMediaElement`}. */
		readonly ended: boolean;
		/** Valid for {@link HTMLMediaElement|`HTMLMediaElement`}. */
		readonly error: MediaError | null;
		/** @deprecated Valid for {@link HTMLScriptElement|`HTMLScriptElement`}. */
		event: string;
		/** Valid for {@link HTMLImageElement|`HTMLImageElement`}, {@link HTMLLinkElement|`HTMLLinkElement`} and {@link HTMLScriptElement|`HTMLScriptElement`}. */
		fetchPriority: string;
		/** Valid for {@link HTMLInputElement|`HTMLInputElement`}. */
		files: FileList | null;
		/** Valid for {@link HTMLButtonElement|`HTMLButtonElement`}, {@link HTMLFieldSetElement|`HTMLFieldSetElement`}, {@link HTMLInputElement|`HTMLInputElement`}, {@link HTMLLabelElement|`HTMLLabelElement`}, {@link HTMLLegendElement|`HTMLLegendElement`}, {@link HTMLObjectElement|`HTMLObjectElement`}, {@link HTMLOptionElement|`HTMLOptionElement`}, {@link HTMLOutputElement|`HTMLOutputElement`}, {@link HTMLSelectElement|`HTMLSelectElement`} and {@link HTMLTextAreaElement|`HTMLTextAreaElement`}. */
		readonly form: HTMLFormElement | null;
		/** Valid for {@link HTMLButtonElement|`HTMLButtonElement`} and {@link HTMLInputElement|`HTMLInputElement`}. */
		formAction: string;
		/** Valid for {@link HTMLButtonElement|`HTMLButtonElement`} and {@link HTMLInputElement|`HTMLInputElement`}. */
		formEnctype: string;
		/** Valid for {@link HTMLButtonElement|`HTMLButtonElement`} and {@link HTMLInputElement|`HTMLInputElement`}. */
		formMethod: string;
		/** Valid for {@link HTMLButtonElement|`HTMLButtonElement`} and {@link HTMLInputElement|`HTMLInputElement`}. */
		formNoValidate: boolean;
		/** Valid for {@link HTMLButtonElement|`HTMLButtonElement`} and {@link HTMLInputElement|`HTMLInputElement`}. */
		formTarget: string;
		/** @deprecated Valid for {@link HTMLTableElement|`HTMLTableElement`}. */
		frame: string;
		/** @deprecated Valid for {@link HTMLIFrameElement|`HTMLIFrameElement`}. */
		frameBorder: string;
		/** Valid for {@link HTMLHyperlinkElementUtils|`HTMLHyperlinkElementUtils`}. */
		hash: string;
		/** Valid for {@link HTMLTableCellElement|`HTMLTableCellElement`}. */
		headers: string;
		/** Valid for {@link HTMLCanvasElement|`HTMLCanvasElement`}, {@link HTMLEmbedElement|`HTMLEmbedElement`}, {@link HTMLIFrameElement|`HTMLIFrameElement`}, {@link HTMLImageElement|`HTMLImageElement`}, {@link HTMLInputElement|`HTMLInputElement`}, {@link HTMLObjectElement|`HTMLObjectElement`}, {@link HTMLSourceElement|`HTMLSourceElement`}, {@link HTMLTableCellElement|`HTMLTableCellElement`} and {@link HTMLVideoElement|`HTMLVideoElement`}. */
		height: number | string;
		/** Valid for {@link HTMLMeterElement|`HTMLMeterElement`}. */
		high: number;
		/** Valid for {@link HTMLHyperlinkElementUtils|`HTMLHyperlinkElementUtils`}. */
		host: string;
		/** Valid for {@link HTMLHyperlinkElementUtils|`HTMLHyperlinkElementUtils`}. */
		hostname: string;
		/** Valid for {@link HTMLBaseElement|`HTMLBaseElement`}, {@link HTMLHyperlinkElementUtils|`HTMLHyperlinkElementUtils`} and {@link HTMLLinkElement|`HTMLLinkElement`}. */
		href: string;
		/** Valid for {@link HTMLAnchorElement|`HTMLAnchorElement`} and {@link HTMLLinkElement|`HTMLLinkElement`}. */
		hreflang: string;
		/** @deprecated Valid for {@link HTMLImageElement|`HTMLImageElement`} and {@link HTMLObjectElement|`HTMLObjectElement`}. */
		hspace: number;
		/** Valid for {@link HTMLLabelElement|`HTMLLabelElement`}, {@link HTMLOutputElement|`HTMLOutputElement`} and {@link HTMLScriptElement|`HTMLScriptElement`}. */
		htmlFor: DOMTokenList | (string & {});
		/** Valid for {@link HTMLMetaElement|`HTMLMetaElement`}. */
		httpEquiv: string;
		/** Valid for {@link HTMLLinkElement|`HTMLLinkElement`}. */
		imageSizes: string;
		/** Valid for {@link HTMLLinkElement|`HTMLLinkElement`}. */
		imageSrcset: string;
		/** Valid for {@link HTMLInputElement|`HTMLInputElement`}. */
		indeterminate: boolean;
		/** Valid for {@link HTMLOptionElement|`HTMLOptionElement`}. */
		readonly index: number;
		/** Valid for {@link HTMLLinkElement|`HTMLLinkElement`} and {@link HTMLScriptElement|`HTMLScriptElement`}. */
		integrity: string;
		/** Valid for {@link HTMLImageElement|`HTMLImageElement`}. */
		isMap: boolean;
		/** Valid for {@link HTMLTrackElement|`HTMLTrackElement`}. */
		kind: string;
		/** Valid for {@link HTMLOptGroupElement|`HTMLOptGroupElement`}, {@link HTMLOptionElement|`HTMLOptionElement`} and {@link HTMLTrackElement|`HTMLTrackElement`}. */
		label: string;
		/** Valid for {@link HTMLButtonElement|`HTMLButtonElement`}, {@link HTMLInputElement|`HTMLInputElement`}, {@link HTMLMeterElement|`HTMLMeterElement`}, {@link HTMLOutputElement|`HTMLOutputElement`}, {@link HTMLProgressElement|`HTMLProgressElement`}, {@link HTMLSelectElement|`HTMLSelectElement`} and {@link HTMLTextAreaElement|`HTMLTextAreaElement`}. */
		readonly labels: NodeListOf<HTMLLabelElement> | null;
		/** Valid for {@link HTMLFormElement|`HTMLFormElement`} and {@link HTMLSelectElement|`HTMLSelectElement`}. */
		length: number;
		/** @deprecated Valid for {@link HTMLBodyElement|`HTMLBodyElement`}. */
		link: string;
		/** Valid for {@link HTMLInputElement|`HTMLInputElement`}. */
		readonly list: HTMLDataListElement | null;
		/** Valid for {@link HTMLIFrameElement|`HTMLIFrameElement`} and {@link HTMLImageElement|`HTMLImageElement`}. */
		loading: "eager" | "lazy" | (string & {});
		/** @deprecated Valid for {@link HTMLIFrameElement|`HTMLIFrameElement`} and {@link HTMLImageElement|`HTMLImageElement`}. */
		longDesc: string;
		/** Valid for {@link HTMLMediaElement|`HTMLMediaElement`}. */
		loop: boolean;
		/** Valid for {@link HTMLMeterElement|`HTMLMeterElement`}. */
		low: number;
		/** @deprecated Valid for {@link HTMLImageElement|`HTMLImageElement`}. */
		lowsrc: string;
		/** @deprecated Valid for {@link HTMLIFrameElement|`HTMLIFrameElement`}. */
		marginHeight: string;
		/** @deprecated Valid for {@link HTMLIFrameElement|`HTMLIFrameElement`}. */
		marginWidth: string;
		/** Valid for {@link HTMLInputElement|`HTMLInputElement`}, {@link HTMLMeterElement|`HTMLMeterElement`} and {@link HTMLProgressElement|`HTMLProgressElement`}. */
		max: string | number;
		/** Valid for {@link HTMLInputElement|`HTMLInputElement`} and {@link HTMLTextAreaElement|`HTMLTextAreaElement`}. */
		maxLength: number;
		/** Valid for {@link HTMLLinkElement|`HTMLLinkElement`}, {@link HTMLMetaElement|`HTMLMetaElement`}, {@link HTMLSourceElement|`HTMLSourceElement`} and {@link HTMLStyleElement|`HTMLStyleElement`}. */
		media: string;
		/** Valid for {@link HTMLMediaElement|`HTMLMediaElement`}. */
		readonly mediaKeys: MediaKeys | null;
		/** Valid for {@link HTMLFormElement|`HTMLFormElement`}. */
		method: string;
		/** Valid for {@link HTMLInputElement|`HTMLInputElement`} and {@link HTMLMeterElement|`HTMLMeterElement`}. */
		min: string | number;
		/** Valid for {@link HTMLInputElement|`HTMLInputElement`} and {@link HTMLTextAreaElement|`HTMLTextAreaElement`}. */
		minLength: number;
		/** Valid for {@link HTMLInputElement|`HTMLInputElement`} and {@link HTMLSelectElement|`HTMLSelectElement`}. */
		multiple: boolean;
		/** Valid for {@link HTMLMediaElement|`HTMLMediaElement`}. */
		muted: boolean;
		/** Valid for {@link HTMLAnchorElement|`HTMLAnchorElement`}, {@link HTMLButtonElement|`HTMLButtonElement`}, {@link HTMLDetailsElement|`HTMLDetailsElement`}, {@link HTMLEmbedElement|`HTMLEmbedElement`}, {@link HTMLFieldSetElement|`HTMLFieldSetElement`}, {@link HTMLFormElement|`HTMLFormElement`}, {@link HTMLIFrameElement|`HTMLIFrameElement`}, {@link HTMLImageElement|`HTMLImageElement`}, {@link HTMLInputElement|`HTMLInputElement`}, {@link HTMLMapElement|`HTMLMapElement`}, {@link HTMLMetaElement|`HTMLMetaElement`}, {@link HTMLObjectElement|`HTMLObjectElement`}, {@link HTMLOutputElement|`HTMLOutputElement`}, {@link HTMLSelectElement|`HTMLSelectElement`}, {@link HTMLSlotElement|`HTMLSlotElement`} and {@link HTMLTextAreaElement|`HTMLTextAreaElement`}. */
		name: string;
		/** Valid for {@link HTMLImageElement|`HTMLImageElement`}. */
		readonly naturalHeight: number;
		/** Valid for {@link HTMLImageElement|`HTMLImageElement`}. */
		readonly naturalWidth: number;
		/** Valid for {@link HTMLMediaElement|`HTMLMediaElement`}. */
		readonly networkState: number;
		/** @deprecated Valid for {@link HTMLAreaElement|`HTMLAreaElement`}. */
		noHref: boolean;
		/** Valid for {@link HTMLScriptElement|`HTMLScriptElement`}. */
		noModule: boolean;
		/** @deprecated Valid for {@link HTMLHRElement|`HTMLHRElement`}. */
		noShade: boolean;
		/** Valid for {@link HTMLFormElement|`HTMLFormElement`}. */
		noValidate: boolean;
		/** @deprecated Valid for {@link HTMLTableCellElement|`HTMLTableCellElement`}. */
		noWrap: boolean;
		/** Valid for {@link HTMLOrSVGElement|`HTMLOrSVGElement`}. */
		nonce: string;
		/** Valid for {@link HTMLMediaElement|`HTMLMediaElement`}. */
		onencrypted: ((this: HTMLMediaElement, ev: MediaEncryptedEvent) => any) | null;
		/** Valid for {@link HTMLVideoElement|`HTMLVideoElement`}. */
		onenterpictureinpicture: ((this: HTMLVideoElement, ev: Event) => any) | null;
		/** Valid for {@link HTMLVideoElement|`HTMLVideoElement`}. */
		onleavepictureinpicture: ((this: HTMLVideoElement, ev: Event) => any) | null;
		/** Valid for {@link HTMLMediaElement|`HTMLMediaElement`}. */
		onwaitingforkey: ((this: HTMLMediaElement, ev: Event) => any) | null;
		/** Valid for {@link HTMLDetailsElement|`HTMLDetailsElement`} and {@link HTMLDialogElement|`HTMLDialogElement`}. */
		open: boolean;
		/** Valid for {@link HTMLMeterElement|`HTMLMeterElement`}. */
		optimum: number;
		/** Valid for {@link HTMLDataListElement|`HTMLDataListElement`} and {@link HTMLSelectElement|`HTMLSelectElement`}. */
		readonly options: HTMLCollectionOf<HTMLOptionElement> | HTMLOptionsCollection;
		/** Valid for {@link HTMLHyperlinkElementUtils|`HTMLHyperlinkElementUtils`}. */
		readonly origin: string;
		/** Valid for {@link HTMLHyperlinkElementUtils|`HTMLHyperlinkElementUtils`}. */
		password: string;
		/** Valid for {@link HTMLHyperlinkElementUtils|`HTMLHyperlinkElementUtils`}. */
		pathname: string;
		/** Valid for {@link HTMLInputElement|`HTMLInputElement`}. */
		pattern: string;
		/** Valid for {@link HTMLMediaElement|`HTMLMediaElement`}. */
		readonly paused: boolean;
		/** Valid for {@link HTMLAnchorElement|`HTMLAnchorElement`} and {@link HTMLAreaElement|`HTMLAreaElement`}. */
		ping: string;
		/** Valid for {@link HTMLInputElement|`HTMLInputElement`} and {@link HTMLTextAreaElement|`HTMLTextAreaElement`}. */
		placeholder: string;
		/** Valid for {@link HTMLMediaElement|`HTMLMediaElement`}. */
		playbackRate: number;
		/** Valid for {@link HTMLMediaElement|`HTMLMediaElement`}. */
		readonly played: TimeRanges;
		/** Valid for {@link HTMLVideoElement|`HTMLVideoElement`}. */
		playsInline: boolean;
		/** Valid for {@link PopoverInvokerElement|`PopoverInvokerElement`}. */
		popoverTargetAction: string;
		/** Valid for {@link PopoverInvokerElement|`PopoverInvokerElement`}. */
		popoverTargetElement: Element | null;
		/** Valid for {@link HTMLHyperlinkElementUtils|`HTMLHyperlinkElementUtils`}. */
		port: string;
		/** Valid for {@link HTMLProgressElement|`HTMLProgressElement`}. */
		readonly position: number;
		/** Valid for {@link HTMLVideoElement|`HTMLVideoElement`}. */
		poster: string;
		/** Valid for {@link HTMLMediaElement|`HTMLMediaElement`}. */
		preload: "none" | "metadata" | "auto" | "";
		/** Valid for {@link HTMLMediaElement|`HTMLMediaElement`}. */
		preservesPitch: boolean;
		/** Valid for {@link HTMLHyperlinkElementUtils|`HTMLHyperlinkElementUtils`}. */
		protocol: string;
		/** Valid for {@link HTMLInputElement|`HTMLInputElement`} and {@link HTMLTextAreaElement|`HTMLTextAreaElement`}. */
		readOnly: boolean;
		/** Valid for {@link HTMLMediaElement|`HTMLMediaElement`} and {@link HTMLTrackElement|`HTMLTrackElement`}. */
		readonly readyState: number;
		/** Valid for {@link HTMLAnchorElement|`HTMLAnchorElement`}, {@link HTMLAreaElement|`HTMLAreaElement`}, {@link HTMLIFrameElement|`HTMLIFrameElement`}, {@link HTMLImageElement|`HTMLImageElement`}, {@link HTMLLinkElement|`HTMLLinkElement`} and {@link HTMLScriptElement|`HTMLScriptElement`}. */
		referrerPolicy: ReferrerPolicy | (string & {});
		/** Valid for {@link HTMLAnchorElement|`HTMLAnchorElement`}, {@link HTMLAreaElement|`HTMLAreaElement`}, {@link HTMLFormElement|`HTMLFormElement`} and {@link HTMLLinkElement|`HTMLLinkElement`}. */
		rel: string;
		/** Valid for {@link HTMLAnchorElement|`HTMLAnchorElement`}, {@link HTMLAreaElement|`HTMLAreaElement`}, {@link HTMLFormElement|`HTMLFormElement`} and {@link HTMLLinkElement|`HTMLLinkElement`}. */
		readonly relList: DOMTokenList;
		/** Valid for {@link HTMLMediaElement|`HTMLMediaElement`}. */
		readonly remote: RemotePlayback;
		/** Valid for {@link HTMLInputElement|`HTMLInputElement`}, {@link HTMLSelectElement|`HTMLSelectElement`} and {@link HTMLTextAreaElement|`HTMLTextAreaElement`}. */
		required: boolean;
		/** Valid for {@link HTMLDialogElement|`HTMLDialogElement`}. */
		returnValue: string;
		/** @deprecated Valid for {@link HTMLAnchorElement|`HTMLAnchorElement`} and {@link HTMLLinkElement|`HTMLLinkElement`}. */
		rev: string;
		/** Valid for {@link HTMLOListElement|`HTMLOListElement`}. */
		reversed: boolean;
		/** Valid for {@link HTMLTableRowElement|`HTMLTableRowElement`}. */
		readonly rowIndex: number;
		/** Valid for {@link HTMLTableCellElement|`HTMLTableCellElement`}. */
		rowSpan: number;
		/** Valid for {@link HTMLTableElement|`HTMLTableElement`}, {@link HTMLTableSectionElement|`HTMLTableSectionElement`} and {@link HTMLTextAreaElement|`HTMLTextAreaElement`}. */
		rows: HTMLCollectionOf<HTMLTableRowElement> | number;
		/** @deprecated Valid for {@link HTMLTableElement|`HTMLTableElement`}. */
		rules: string;
		/** Valid for {@link HTMLIFrameElement|`HTMLIFrameElement`}. */
		readonly sandbox: DOMTokenList;
		/** @deprecated Valid for {@link HTMLMetaElement|`HTMLMetaElement`}. */
		scheme: string;
		/** Valid for {@link HTMLTableCellElement|`HTMLTableCellElement`}. */
		scope: string;
		/** @deprecated Valid for {@link HTMLIFrameElement|`HTMLIFrameElement`}. */
		scrolling: string;
		/** Valid for {@link HTMLHyperlinkElementUtils|`HTMLHyperlinkElementUtils`}. */
		search: string;
		/** Valid for {@link HTMLTableRowElement|`HTMLTableRowElement`}. */
		readonly sectionRowIndex: number;
		/** Valid for {@link HTMLMediaElement|`HTMLMediaElement`}. */
		readonly seekable: TimeRanges;
		/** Valid for {@link HTMLMediaElement|`HTMLMediaElement`}. */
		readonly seeking: boolean;
		/** Valid for {@link HTMLOptionElement|`HTMLOptionElement`}. */
		selected: boolean;
		/** Valid for {@link HTMLSelectElement|`HTMLSelectElement`}. */
		selectedIndex: number;
		/** Valid for {@link HTMLSelectElement|`HTMLSelectElement`}. */
		readonly selectedOptions: HTMLCollectionOf<HTMLOptionElement>;
		/** Valid for {@link HTMLInputElement|`HTMLInputElement`} and {@link HTMLTextAreaElement|`HTMLTextAreaElement`}. */
		selectionDirection: "forward" | "backward" | "none" | null;
		/** Valid for {@link HTMLInputElement|`HTMLInputElement`} and {@link HTMLTextAreaElement|`HTMLTextAreaElement`}. */
		selectionEnd: number | null;
		/** Valid for {@link HTMLInputElement|`HTMLInputElement`} and {@link HTMLTextAreaElement|`HTMLTextAreaElement`}. */
		selectionStart: number | null;
		/** Valid for {@link HTMLTemplateElement|`HTMLTemplateElement`}. */
		shadowRootClonable: boolean;
		/** Valid for {@link HTMLTemplateElement|`HTMLTemplateElement`}. */
		shadowRootDelegatesFocus: boolean;
		/** Valid for {@link HTMLTemplateElement|`HTMLTemplateElement`}. */
		shadowRootMode: string;
		/** Valid for {@link HTMLTemplateElement|`HTMLTemplateElement`}. */
		shadowRootSerializable: boolean;
		/** Valid for {@link HTMLAnchorElement|`HTMLAnchorElement`} and {@link HTMLAreaElement|`HTMLAreaElement`}. */
		shape: string;
		/** Valid for {@link LinkStyle|`LinkStyle`}. */
		readonly sheet: CSSStyleSheet | null;
		/** Valid for {@link HTMLMediaElement|`HTMLMediaElement`}. */
		readonly sinkId: string;
		/** Valid for {@link HTMLHRElement|`HTMLHRElement`}, {@link HTMLInputElement|`HTMLInputElement`} and {@link HTMLSelectElement|`HTMLSelectElement`}. */
		size: string | number;
		/** Valid for {@link HTMLImageElement|`HTMLImageElement`}, {@link HTMLLinkElement|`HTMLLinkElement`} and {@link HTMLSourceElement|`HTMLSourceElement`}. */
		sizes: DOMTokenList | (string & {});
		/** Valid for {@link HTMLTableColElement|`HTMLTableColElement`}. */
		span: number;
		/** Valid for {@link HTMLEmbedElement|`HTMLEmbedElement`}, {@link HTMLIFrameElement|`HTMLIFrameElement`}, {@link HTMLImageElement|`HTMLImageElement`}, {@link HTMLInputElement|`HTMLInputElement`}, {@link HTMLMediaElement|`HTMLMediaElement`}, {@link HTMLScriptElement|`HTMLScriptElement`}, {@link HTMLSourceElement|`HTMLSourceElement`} and {@link HTMLTrackElement|`HTMLTrackElement`}. */
		src: string;
		/** Valid for {@link HTMLMediaElement|`HTMLMediaElement`}. */
		srcObject: MediaProvider | null;
		/** Valid for {@link HTMLIFrameElement|`HTMLIFrameElement`}. */
		srcdoc: string;
		/** Valid for {@link HTMLTrackElement|`HTMLTrackElement`}. */
		srclang: string;
		/** Valid for {@link HTMLImageElement|`HTMLImageElement`} and {@link HTMLSourceElement|`HTMLSourceElement`}. */
		srcset: string;
		/** @deprecated Valid for {@link HTMLObjectElement|`HTMLObjectElement`}. */
		standby: string;
		/** Valid for {@link HTMLOListElement|`HTMLOListElement`}. */
		start: number;
		/** Valid for {@link HTMLInputElement|`HTMLInputElement`}. */
		step: string;
		/** @deprecated Valid for {@link HTMLTableElement|`HTMLTableElement`}. */
		summary: string;
		/** Valid for {@link HTMLTableElement|`HTMLTableElement`}. */
		readonly tBodies: HTMLCollectionOf<HTMLTableSectionElement>;
		/** Valid for {@link HTMLTableElement|`HTMLTableElement`}. */
		tFoot: HTMLTableSectionElement | null;
		/** Valid for {@link HTMLTableElement|`HTMLTableElement`}. */
		tHead: HTMLTableSectionElement | null;
		/** Valid for {@link HTMLOrSVGElement|`HTMLOrSVGElement`}. */
		tabIndex: number;
		/** Valid for {@link HTMLAnchorElement|`HTMLAnchorElement`}, {@link HTMLAreaElement|`HTMLAreaElement`}, {@link HTMLBaseElement|`HTMLBaseElement`}, {@link HTMLFormElement|`HTMLFormElement`} and {@link HTMLLinkElement|`HTMLLinkElement`}. */
		target: string;
		/** Valid for {@link HTMLAnchorElement|`HTMLAnchorElement`}, {@link HTMLBodyElement|`HTMLBodyElement`}, {@link HTMLOptionElement|`HTMLOptionElement`}, {@link HTMLScriptElement|`HTMLScriptElement`} and {@link HTMLTitleElement|`HTMLTitleElement`}. */
		text: string;
		/** Valid for {@link HTMLTextAreaElement|`HTMLTextAreaElement`}. */
		readonly textLength: number;
		/** Valid for {@link HTMLMediaElement|`HTMLMediaElement`}. */
		readonly textTracks: TextTrackList;
		/** Valid for {@link HTMLTrackElement|`HTMLTrackElement`}. */
		readonly track: TextTrack;
		/** Valid for {@link HTMLAnchorElement|`HTMLAnchorElement`}, {@link HTMLButtonElement|`HTMLButtonElement`}, {@link HTMLEmbedElement|`HTMLEmbedElement`}, {@link HTMLFieldSetElement|`HTMLFieldSetElement`}, {@link HTMLInputElement|`HTMLInputElement`}, {@link HTMLLIElement|`HTMLLIElement`}, {@link HTMLLinkElement|`HTMLLinkElement`}, {@link HTMLOListElement|`HTMLOListElement`}, {@link HTMLObjectElement|`HTMLObjectElement`}, {@link HTMLOutputElement|`HTMLOutputElement`}, {@link HTMLScriptElement|`HTMLScriptElement`}, {@link HTMLSelectElement|`HTMLSelectElement`}, {@link HTMLSourceElement|`HTMLSourceElement`}, {@link HTMLStyleElement|`HTMLStyleElement`}, {@link HTMLTextAreaElement|`HTMLTextAreaElement`} and {@link HTMLUListElement|`HTMLUListElement`}. */
		type: "submit" | "reset" | "button" | "select-one" | "select-multiple" | (string & {});
		/** Valid for {@link HTMLImageElement|`HTMLImageElement`}, {@link HTMLInputElement|`HTMLInputElement`} and {@link HTMLObjectElement|`HTMLObjectElement`}. */
		useMap: string;
		/** Valid for {@link HTMLHyperlinkElementUtils|`HTMLHyperlinkElementUtils`}. */
		username: string;
		/** @deprecated Valid for {@link HTMLTableCellElement|`HTMLTableCellElement`}, {@link HTMLTableColElement|`HTMLTableColElement`}, {@link HTMLTableRowElement|`HTMLTableRowElement`} and {@link HTMLTableSectionElement|`HTMLTableSectionElement`}. */
		vAlign: string;
		/** @deprecated Valid for {@link HTMLBodyElement|`HTMLBodyElement`}. */
		vLink: string;
		/** Valid for {@link HTMLButtonElement|`HTMLButtonElement`}, {@link HTMLFieldSetElement|`HTMLFieldSetElement`}, {@link HTMLInputElement|`HTMLInputElement`}, {@link HTMLObjectElement|`HTMLObjectElement`}, {@link HTMLOutputElement|`HTMLOutputElement`}, {@link HTMLSelectElement|`HTMLSelectElement`} and {@link HTMLTextAreaElement|`HTMLTextAreaElement`}. */
		readonly validationMessage: string;
		/** Valid for {@link HTMLButtonElement|`HTMLButtonElement`}, {@link HTMLFieldSetElement|`HTMLFieldSetElement`}, {@link HTMLInputElement|`HTMLInputElement`}, {@link HTMLObjectElement|`HTMLObjectElement`}, {@link HTMLOutputElement|`HTMLOutputElement`}, {@link HTMLSelectElement|`HTMLSelectElement`} and {@link HTMLTextAreaElement|`HTMLTextAreaElement`}. */
		readonly validity: ValidityState;
		/** Valid for {@link HTMLButtonElement|`HTMLButtonElement`}, {@link HTMLDataElement|`HTMLDataElement`}, {@link HTMLInputElement|`HTMLInputElement`}, {@link HTMLLIElement|`HTMLLIElement`}, {@link HTMLMeterElement|`HTMLMeterElement`}, {@link HTMLOptionElement|`HTMLOptionElement`}, {@link HTMLOutputElement|`HTMLOutputElement`}, {@link HTMLProgressElement|`HTMLProgressElement`}, {@link HTMLSelectElement|`HTMLSelectElement`} and {@link HTMLTextAreaElement|`HTMLTextAreaElement`}. */
		value: string | number;
		/** Valid for {@link HTMLInputElement|`HTMLInputElement`}. */
		valueAsDate: Date | null;
		/** Valid for {@link HTMLInputElement|`HTMLInputElement`}. */
		valueAsNumber: number;
		/** @deprecated Valid for {@link HTMLHtmlElement|`HTMLHtmlElement`}. */
		version: string;
		/** Valid for {@link HTMLVideoElement|`HTMLVideoElement`}. */
		readonly videoHeight: number;
		/** Valid for {@link HTMLVideoElement|`HTMLVideoElement`}. */
		readonly videoWidth: number;
		/** Valid for {@link HTMLMediaElement|`HTMLMediaElement`}. */
		volume: number;
		/** @deprecated Valid for {@link HTMLImageElement|`HTMLImageElement`} and {@link HTMLObjectElement|`HTMLObjectElement`}. */
		vspace: number;
		/** Valid for {@link HTMLInputElement|`HTMLInputElement`}. */
		readonly webkitEntries: ReadonlyArray<FileSystemEntry>;
		/** Valid for {@link HTMLInputElement|`HTMLInputElement`}. */
		webkitdirectory: boolean;
		/** Valid for {@link HTMLCanvasElement|`HTMLCanvasElement`}, {@link HTMLEmbedElement|`HTMLEmbedElement`}, {@link HTMLHRElement|`HTMLHRElement`}, {@link HTMLIFrameElement|`HTMLIFrameElement`}, {@link HTMLImageElement|`HTMLImageElement`}, {@link HTMLInputElement|`HTMLInputElement`}, {@link HTMLObjectElement|`HTMLObjectElement`}, {@link HTMLPreElement|`HTMLPreElement`}, {@link HTMLSourceElement|`HTMLSourceElement`}, {@link HTMLTableCellElement|`HTMLTableCellElement`}, {@link HTMLTableColElement|`HTMLTableColElement`}, {@link HTMLTableElement|`HTMLTableElement`} and {@link HTMLVideoElement|`HTMLVideoElement`}. */
		width: number | string;
		/** Valid for {@link HTMLButtonElement|`HTMLButtonElement`}, {@link HTMLFieldSetElement|`HTMLFieldSetElement`}, {@link HTMLInputElement|`HTMLInputElement`}, {@link HTMLObjectElement|`HTMLObjectElement`}, {@link HTMLOutputElement|`HTMLOutputElement`}, {@link HTMLSelectElement|`HTMLSelectElement`} and {@link HTMLTextAreaElement|`HTMLTextAreaElement`}. */
		readonly willValidate: boolean;
		/** Valid for {@link HTMLTextAreaElement|`HTMLTextAreaElement`}. */
		wrap: string;
		/** Valid for {@link HTMLImageElement|`HTMLImageElement`}. */
		readonly x: number;
		/** Valid for {@link HTMLImageElement|`HTMLImageElement`}. */
		readonly y: number;
		/** Valid for {@link HTMLSelectElement|`HTMLSelectElement`}. */
		add(element: HTMLOptionElement | HTMLOptGroupElement, before?: HTMLElement | number | null): void;
		/** Valid for {@link HTMLMediaElement|`HTMLMediaElement`}. */
		addTextTrack(kind: TextTrackKind, label?: string, language?: string): TextTrack;
		/** Valid for {@link HTMLSlotElement|`HTMLSlotElement`}. */
		assign(...nodes: (Element | Text)[]): void;
		/** Valid for {@link HTMLSlotElement|`HTMLSlotElement`}. */
		assignedElements(options?: AssignedNodesOptions): Element[];
		/** Valid for {@link HTMLSlotElement|`HTMLSlotElement`}. */
		assignedNodes(options?: AssignedNodesOptions): Node[];
		/** Valid for {@link HTMLOrSVGElement|`HTMLOrSVGElement`}. */
		blur(): void;
		/** Valid for {@link HTMLMediaElement|`HTMLMediaElement`}. */
		canPlayType(type: string): CanPlayTypeResult;
		/** Valid for {@link HTMLVideoElement|`HTMLVideoElement`}. */
		cancelVideoFrameCallback(handle: number): void;
		/** Valid for {@link HTMLCanvasElement|`HTMLCanvasElement`}. */
		captureStream(frameRequestRate?: number): MediaStream;
		/** Valid for {@link HTMLButtonElement|`HTMLButtonElement`}, {@link HTMLFieldSetElement|`HTMLFieldSetElement`}, {@link HTMLFormElement|`HTMLFormElement`}, {@link HTMLInputElement|`HTMLInputElement`}, {@link HTMLObjectElement|`HTMLObjectElement`}, {@link HTMLOutputElement|`HTMLOutputElement`}, {@link HTMLSelectElement|`HTMLSelectElement`} and {@link HTMLTextAreaElement|`HTMLTextAreaElement`}. */
		checkValidity(): boolean;
		/** Valid for {@link HTMLDialogElement|`HTMLDialogElement`}. */
		close(returnValue?: string): void;
		/** Valid for {@link HTMLTableElement|`HTMLTableElement`}. */
		createCaption(): HTMLTableCaptionElement;
		/** Valid for {@link HTMLTableElement|`HTMLTableElement`}. */
		createTBody(): HTMLTableSectionElement;
		/** Valid for {@link HTMLTableElement|`HTMLTableElement`}. */
		createTFoot(): HTMLTableSectionElement;
		/** Valid for {@link HTMLTableElement|`HTMLTableElement`}. */
		createTHead(): HTMLTableSectionElement;
		/** Valid for {@link HTMLImageElement|`HTMLImageElement`}. */
		decode(): Promise<void>;
		/** Valid for {@link HTMLTableElement|`HTMLTableElement`}. */
		deleteCaption(): void;
		/** Valid for {@link HTMLTableRowElement|`HTMLTableRowElement`}. */
		deleteCell(index: number): void;
		/** Valid for {@link HTMLTableElement|`HTMLTableElement`} and {@link HTMLTableSectionElement|`HTMLTableSectionElement`}. */
		deleteRow(index: number): void;
		/** Valid for {@link HTMLTableElement|`HTMLTableElement`}. */
		deleteTFoot(): void;
		/** Valid for {@link HTMLTableElement|`HTMLTableElement`}. */
		deleteTHead(): void;
		/** Valid for {@link HTMLMediaElement|`HTMLMediaElement`}. */
		fastSeek(time: number): void;
		/** Valid for {@link HTMLOrSVGElement|`HTMLOrSVGElement`}. */
		focus(options?: FocusOptions): void;
		/** Valid for {@link HTMLCanvasElement|`HTMLCanvasElement`}. */
		getContext(contextId: "2d", options?: CanvasRenderingContext2DSettings): CanvasRenderingContext2D | null;
		getContext(contextId: "bitmaprenderer", options?: ImageBitmapRenderingContextSettings): ImageBitmapRenderingContext | null;
		getContext(contextId: "webgl", options?: WebGLContextAttributes): WebGLRenderingContext | null;
		getContext(contextId: "webgl2", options?: WebGLContextAttributes): WebGL2RenderingContext | null;
		getContext(contextId: string, options?: any): RenderingContext | null;
		/** Valid for {@link HTMLEmbedElement|`HTMLEmbedElement`}, {@link HTMLIFrameElement|`HTMLIFrameElement`} and {@link HTMLObjectElement|`HTMLObjectElement`}. */
		getSVGDocument(): Document | null;
		/** Valid for {@link HTMLVideoElement|`HTMLVideoElement`}. */
		getVideoPlaybackQuality(): VideoPlaybackQuality;
		/** Valid for {@link HTMLTableRowElement|`HTMLTableRowElement`}. */
		insertCell(index?: number): HTMLTableCellElement;
		/** Valid for {@link HTMLTableElement|`HTMLTableElement`} and {@link HTMLTableSectionElement|`HTMLTableSectionElement`}. */
		insertRow(index?: number): HTMLTableRowElement;
		/** Valid for {@link HTMLSelectElement|`HTMLSelectElement`}. */
		item(index: number): HTMLOptionElement | null;
		/** Valid for {@link HTMLMediaElement|`HTMLMediaElement`}. */
		load(): void;
		/** Valid for {@link HTMLSelectElement|`HTMLSelectElement`}. */
		namedItem(name: string): HTMLOptionElement | null;
		/** Valid for {@link HTMLMediaElement|`HTMLMediaElement`}. */
		pause(): void;
		/** Valid for {@link HTMLMediaElement|`HTMLMediaElement`}. */
		play(): Promise<void>;
		/** Valid for {@link HTMLSelectElement|`HTMLSelectElement`}. */
		remove(): void;
		remove(index: number): void;
		/** Valid for {@link HTMLButtonElement|`HTMLButtonElement`}, {@link HTMLFieldSetElement|`HTMLFieldSetElement`}, {@link HTMLFormElement|`HTMLFormElement`}, {@link HTMLInputElement|`HTMLInputElement`}, {@link HTMLObjectElement|`HTMLObjectElement`}, {@link HTMLOutputElement|`HTMLOutputElement`}, {@link HTMLSelectElement|`HTMLSelectElement`} and {@link HTMLTextAreaElement|`HTMLTextAreaElement`}. */
		reportValidity(): boolean;
		/** Valid for {@link HTMLVideoElement|`HTMLVideoElement`}. */
		requestPictureInPicture(): Promise<PictureInPictureWindow>;
		/** Valid for {@link HTMLFormElement|`HTMLFormElement`}. */
		requestSubmit(submitter?: HTMLElement | null): void;
		/** Valid for {@link HTMLVideoElement|`HTMLVideoElement`}. */
		requestVideoFrameCallback(callback: VideoFrameRequestCallback): number;
		/** Valid for {@link HTMLFormElement|`HTMLFormElement`}. */
		reset(): void;
		/** Valid for {@link HTMLInputElement|`HTMLInputElement`} and {@link HTMLTextAreaElement|`HTMLTextAreaElement`}. */
		select(): void;
		/** Valid for {@link HTMLButtonElement|`HTMLButtonElement`}, {@link HTMLFieldSetElement|`HTMLFieldSetElement`}, {@link HTMLInputElement|`HTMLInputElement`}, {@link HTMLObjectElement|`HTMLObjectElement`}, {@link HTMLOutputElement|`HTMLOutputElement`}, {@link HTMLSelectElement|`HTMLSelectElement`} and {@link HTMLTextAreaElement|`HTMLTextAreaElement`}. */
		setCustomValidity(error: string): void;
		/** Valid for {@link HTMLMediaElement|`HTMLMediaElement`}. */
		setMediaKeys(mediaKeys: MediaKeys | null): Promise<void>;
		/** Valid for {@link HTMLInputElement|`HTMLInputElement`} and {@link HTMLTextAreaElement|`HTMLTextAreaElement`}. */
		setRangeText(replacement: string): void;
		setRangeText(replacement: string, start: number, end: number, selectionMode?: SelectionMode): void;
		/** Valid for {@link HTMLInputElement|`HTMLInputElement`} and {@link HTMLTextAreaElement|`HTMLTextAreaElement`}. */
		setSelectionRange(start: number | null, end: number | null, direction?: "forward" | "backward" | "none"): void;
		/** Valid for {@link HTMLMediaElement|`HTMLMediaElement`}. */
		setSinkId(sinkId: string): Promise<void>;
		/** Valid for {@link HTMLDialogElement|`HTMLDialogElement`}. */
		show(): void;
		/** Valid for {@link HTMLDialogElement|`HTMLDialogElement`}. */
		showModal(): void;
		/** Valid for {@link HTMLInputElement|`HTMLInputElement`} and {@link HTMLSelectElement|`HTMLSelectElement`}. */
		showPicker(): void;
		/** Valid for {@link HTMLInputElement|`HTMLInputElement`}. */
		stepDown(n?: number): void;
		/** Valid for {@link HTMLInputElement|`HTMLInputElement`}. */
		stepUp(n?: number): void;
		/** Valid for {@link HTMLFormElement|`HTMLFormElement`}. */
		submit(): void;
		/** Valid for {@link HTMLCanvasElement|`HTMLCanvasElement`}. */
		toBlob(callback: BlobCallback, type?: string, quality?: any): void;
		/** Valid for {@link HTMLCanvasElement|`HTMLCanvasElement`}. */
		toDataURL(type?: string, quality?: any): string;
		/** Valid for {@link HTMLHyperlinkElementUtils|`HTMLHyperlinkElementUtils`}. */
		toString(): string;
		/** Valid for {@link HTMLCanvasElement|`HTMLCanvasElement`}. */
		transferControlToOffscreen(): OffscreenCanvas;
		[name: number]: HTMLOptionElement | HTMLOptGroupElement;
		[Symbol.iterator](): IterableIterator<HTMLOptionElement>;
	}
}
